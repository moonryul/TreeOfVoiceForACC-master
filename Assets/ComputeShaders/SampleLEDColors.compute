#pragma kernel SampleLEDColors

// 스레드 그룹의 스레드 사이즈
#define BLOCK_SIZE 256

#define M_PI 3.1415926535897932384626433832795
#define  epsilon 1e-3 


// 보이드 구조체

struct Boid
{
	//float3 wallOrigin; // the reference position of the wall (the boid reference frame) on which the boid is 
	//float3  eulerAngles; // the rotation of the boid reference frame
	float4x4 boidFrame;
	float3   normal;
	float3  position; // the position of the  boid in the boid reference frame
	float3  scale;
	float3  headDir; // the head angle of the  boid on the local plane: from 0 to 2 *PI
	float speed;            // the speed of a boid

	float  radius; // the radius of a circle boid; //not directly used
	float3 colorHSL; // HSL color
	float4 color;         // RGBA color
	float2 soundGrain; //        the freq (pitch) and amp of the boid sound grain
	float duration; //   the duration of the boid for one frame. 
	int   wallNo;    // the number of the wall on which the boid is 
	

};

struct BoidLEDData
{
	// public Vector3  WallOrigin; // the reference position of the wall (the boid reference frame) on which the boid is 

	//public Vector3 EulerAngles; // the rotation of the boid reference frame
	 float4x4 boidFrame;
	 float3 position; //
	 float3 headDir; // heading direction of the boid on the local plane
	 float4 color;         // RGBA color
	 float3 scale;
	 int wallNo;      // the number of the wall whose boids defined the light sources of the branch cylinder
							// 0=> the inner  circular wall. 
							// 1 => the outer circular wall;
	 int nearestBoidID;
	 int  neighborCount;
};

//
//public struct BoidLEDData
//{
//
//	public Vector3 Position; //
//	public Vector3 HeadDir; // heading direction of the boid on the local plane
//	public Vector4 Color;         // RGBA color
//	public Vector3 Scale;
//	public int WallNo;      // the number of the wall whose boids defined the light sources of the branch cylinder
//							// 0=> the inner  circular wall. 
//							// 1 => the outer circular wall;
//}
// 보이드 데이터 버퍼

//
//public struct BoidLEDDebugData
//{
//	// public Vector3  WallOrigin; // the reference position of the wall (the boid reference frame) on which the boid is 
//
//	//public Vector3 EulerAngles; // the rotation of the boid reference frame
//	public int BoidLEDID; // the position of the  boid in the boid reference frame        
//
//	public int  NearestBoidID; // the scale factors
//	public int  NeighborCount; // heading direction of the boid on the local plane
//	public float NeighborRadius; // the radius of the circle boid
//	public Vector4 NearestBoidColor;         // RGBA color
//	public Vector4 AvgColor;         // RGBA color
//
//}


struct BoidLEDRenderDebugData
{
	// public Vector3  WallOrigin; // the reference position of the wall (the boid reference frame) on which the boid is 

	//public Vector3 EulerAngles; // the rotation of the boid reference frame
	int boidLEDID; // the position of the  boid in the boid reference frame        

	int  nearestBoidID; // the scale factors
	int  neighborCount; // heading direction of the boid on the local plane
	float neighborRadius; // the radius of the circle boid
	float4 nearestBoidColor;         // RGBA color
	float4  avgColor;         // RGBA color

};




StructuredBuffer<Boid> _BoidBuffer;
RWStructuredBuffer<BoidLEDData> _BoidLEDBuffer;

RWStructuredBuffer<BoidLEDRenderDebugData> _BoidLEDRenderDebugBuffer;

RWStructuredBuffer<float4> _BoidLEDRenderDebugBuffer0;


float _SamplingRadius;

int  _Hemisphere;


float _MaxDomainRadius; // 10
float _MinDomainRadius; // 0.7

float _MaxChainRadius; // 2 m
float _MinChainRadius;  // 0.7 m

int _BoidsNum;
int _NumOfWalls;




  // Use a single boid buffer for the ceiling and the ground, 
  // but use a flag to indicate whether the boid is on the ground or on the ceiling

  //https://msdn.microsoft.com/ko-kr/library/windows/desktop/ff471442(v=vs.85).aspx
[numthreads(BLOCK_SIZE, 1, 1)]
void SampleLEDColors(uint3 DTid : SV_DispatchThreadID)
{
	// Process a SINGLE Boid refered to by DTid.x

	int pId = DTid.x;

	BoidLEDData pBoidLED = _BoidLEDBuffer[pId];


	int neighborCnt = 0;


	float4 colorSum = (float4)0.0;
	float4 avgColor = (float4)0.0;

	float  weightSum = (float)0.0;

	float weight, dist;
	float3 diffVec;



	// apply three boid rules using neighbors


	float minDist = _MaxDomainRadius;
		
	int minIndex = -1;

	
	//float3 posInCeiling =  pBoidLED.position;
	for (int nId = 0; nId < _BoidsNum; nId++)
	{

		//if (nId == pId) continue; // go to the next iteration

		Boid nBoid = _BoidBuffer[nId];

		// Get the hemisphere from which to sample LED colors.
		// Consider the neighbor  boids which are down
		// projected onto the plane y = _HeimisphereGroundPosition


		if (_Hemisphere == 1)
		{
			if ( nBoid.position.y < 0)
			{//  The boid is not in the upper hemisphere 
			 //  ignore the boid
				continue;
			}

			else
			{
				// Project the boid on the plane defined by _HeimisphereGroundPosition from which 
		 //  the boids which contribute the color to pBoidLED.
		// This projection is achieved by ignoring the y coordinate of the boids.


		   // minChainRadius: maxChainRadius => minDomainRadius: maxDomainRadius
				float3 LEDBoidPosFromYAxis = float3(pBoidLED.position.x, 0.0, pBoidLED.position.z);
				float LEDBoidRadius = length(LEDBoidPosFromYAxis);

				if (LEDBoidRadius < _MinChainRadius) {
					LEDBoidRadius = _MinChainRadius;
				}

				if (LEDBoidRadius > _MaxChainRadius) {
					LEDBoidRadius = _MaxChainRadius;
				}

				float radiusForpBoidLED = _MinDomainRadius +
					(_MaxDomainRadius - _MinDomainRadius) / (_MaxChainRadius - _MinChainRadius)
					* (LEDBoidRadius - _MinChainRadius);

				// get the boid corresponding to LED boid

				//float3 newpBoidLEDPos = radiusOfBoidForpLEDBoid * pBoidLED.headDir;

				//diffVec = nBoid.position - newLEDBoidPos;

				dist = abs(length(float3(nBoid.position.x, 0, nBoid.position.z)) - radiusForpBoidLED);


				// check if the boid nBoid is a neighbor of the current boid pBoid for separation action

				if (dist <= _SamplingRadius)

				{
					if (dist < minDist)
					{
						minDist = dist;
						minIndex = nId;
					}


					weight = smoothstep(0.0, _SamplingRadius, dist); // smoothstep(x, a,b) clamps x between  a and b?
					//												 //x is clamped to the range [min,
					//												 //max] and then the interpolation formula is evaluated :
					//												 //-2 * ((x - min) / (max - min))3 + 3 * ((x - min) / (max - min))2

					if (weight < epsilon)
					{
						weight = epsilon; // avoid too small a number for division
					}

					//colorSum +=  (1 / weight) * nBoid.color ; // sum  diffVec's to compute the average sepration vector

					colorSum += nBoid.color;

					//weightSum += (1 / weight);

					neighborCnt++;          // increament the separation neighor count

				}// if (dist <= _SamplingRadius)

			} // esle of  nBoid.position.y < 0

		}//if (_Hemisphere ==1)

		else // _Hemisphere == 0; lower hemisphere
		{ 
			if ( nBoid.position.y > 0 )

			{//  The boid is not in the  lower hemisphere 
			 //  ignore the boid
			 continue;  // go to the next boid

			}
			else
			{
				// Project the boid on the plane defined by _HeimisphereGroundPosition from which 
		 //  the boids which contribute the color to pBoidLED.
		// This projection is achieved by ignoring the y coordinate of the boids.


		   // minChainRadius: maxChainRadius => minDomainRadius: maxDomainRadius
				float3 LEDBoidPosFromYAxis = float3(pBoidLED.position.x, 0.0, pBoidLED.position.z);
				float LEDBoidRadius = length(LEDBoidPosFromYAxis);

				if (LEDBoidRadius < _MinChainRadius) {
					LEDBoidRadius = _MinChainRadius;
				}

				if (LEDBoidRadius > _MaxChainRadius) {
					LEDBoidRadius = _MaxChainRadius;
				}

				float radiusForpBoidLED = _MinDomainRadius +
					(_MaxDomainRadius - _MinDomainRadius) / (_MaxChainRadius - _MinChainRadius)
					* (LEDBoidRadius - _MinChainRadius);

				// get the boid corresponding to LED boid

				//float3 newpBoidLEDPos = radiusOfBoidForpLEDBoid * pBoidLED.headDir;

				//diffVec = nBoid.position - newLEDBoidPos;

				dist = abs(length(float3(nBoid.position.x, 0, nBoid.position.z)) - radiusForpBoidLED);


				// check if the boid nBoid is a neighbor of the current boid pBoid for separation action

				if (dist <= _SamplingRadius)

				{
					if (dist < minDist)
					{
						minDist = dist;
						minIndex = nId;
					}


					weight = smoothstep(0.0, _SamplingRadius, dist); // smoothstep(x, a,b) clamps x between  a and b?
					//												 //x is clamped to the range [min,
					//												 //max] and then the interpolation formula is evaluated :
					//												 //-2 * ((x - min) / (max - min))3 + 3 * ((x - min) / (max - min))2

					if (weight < epsilon)
					{
						weight = epsilon; // avoid too small a number for division
					}

					//colorSum +=  (1 / weight) * nBoid.color ; // sum  diffVec's to compute the average sepration vector

					colorSum += nBoid.color;

					//weightSum += (1 / weight);

					neighborCnt++;          // increament the separation neighor count

				}// if (dist <= _SamplingRadius)

			}// else  of if ( nBoid.position.y > 0 )
		} // else of _Hemisphere == 1

		  

		} //  for(int nId = 0; nId < _BoidsNum; nId++)

	// The scan over the neighbots is finished

	if (minIndex == -1) // no boid within the sampling radius
	{ // no near boid; this does not happen because a boid is its own neigbor
		_BoidLEDBuffer[pId].color = float4(0.0, 0.0, 0.0, 1.0);
		//pBoidLED.color  = float4(1.0, 1.0, 1.0, 1.0);
	}
	else
	{
		//_BoidLEDBuffer[pId].color = float4(1.0, 1.0, 1.0, 1.0);
		//pBoidLED.color = float4(0.0, 0.0, 0.0, 1.0);

		/*_BoidLEDBuffer[pId].position = _BoidBuffer[minIndex].position;
		_BoidLEDBuffer[pId].headDir = _BoidBuffer[minIndex].headDir;*/
		_BoidLEDBuffer[pId].color = _BoidBuffer[minIndex].color;
		//_BoidLEDBuffer[pId].color = colorSum / (float)neighborCnt;

		//_BoidLEDBuffer[pId].color = colorSum / weightSum;

		_BoidLEDBuffer[pId].nearestBoidID = minIndex;
		_BoidLEDBuffer[pId].neighborCount  = neighborCnt;
		//_BoidLEDBuffer[pId].wallNo = _SamplingWall;

		/*_BoidLEDRenderDebugBuffer[pId].nearestBoidID = minIndex;
		_BoidLEDRenderDebugBuffer[pId].neighborCount = neighborCnt;
		_BoidLEDRenderDebugBuffer[pId].neighborRadius = minDist;
		_BoidLEDRenderDebugBuffer[pId].nearestBoidColor  = _BoidBuffer[minIndex].color;
		_BoidLEDRenderDebugBuffer[pId].avgColor = colorSum / (float)neighborCnt;

		_BoidLEDRenderDebugBuffer0[pId][0] = (float)minIndex;
		_BoidLEDRenderDebugBuffer0[pId][1] =  minDist;
		_BoidLEDRenderDebugBuffer0[pId][2] = neighborCnt;
		*/
	
	}


	//if (neighborCnt != 0) // This condition holds only for boids on the ground or the ceiling
	//{
	//		//avgColor = colorSum / weightSum;
	//	    avgColor = colorSum / (float) neighborCnt;

	//	    pBoidLED.color = avgColor;
	//		//pBoidLED.color  = float4(1.0, 1.0, 1.0, 1.0);
	//		
	//} // 
	//else 
	//{ // no neighbor
	//	// for debugging
	//	 pBoidLED.color = float4(0.0, 0.0, 0.0, 1.0); // set the black color

	//	pBoidLED.color = float4(1.0, 1.0, 1.0, 1.0); // set the black color
	//}


	return;
} // SampleLEDColors()

